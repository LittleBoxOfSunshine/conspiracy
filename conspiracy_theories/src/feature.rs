use std::{any::Any, sync::Arc};

/// Allows determining the current state of a feature, where the feature is specified as an enum
/// variant.
pub trait AsFeature {
    /// The feature set definition. To be useful and provide the best ergonomics this type should be
    /// an enum.
    type Feature;

    /// Determine the current state of the specified feature (typically an enum variant).
    fn as_feature(&self, feature: Self::Feature) -> bool;
}

/// Marker trait used to indicate that a type was generated by the [`conspiracy`](https://crates.io/crates/conspiracy)
/// crate or aligns with the requirements of the code generation. Having can improve compiler errors
/// and gives implementors of other traits such as [`FeatureTracker`] an interface to program
/// against generated code.
pub trait FeatureSet: Send + Sync + 'static {
    /// The generated state representation type that corresponds to this feature set.
    type State: AsFeature<Feature = Self> + Default + Send + Sync + 'static;
}

/// Tracks if a statically typed (enum variant) feature is currently enabled or disabled.
pub trait FeatureTracker: 'static {
    /// Get the current state of all tracked features.
    fn static_feature_state(&self) -> Arc<dyn Any + Send + Sync>;
}
